{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ProductosService {\n  constructor() {\n    this.productoComponent = [];\n    this.ultimoId = 0;\n  }\n  getListaProductos() {\n    return this.productos;\n  }\n  crearProductos(productoComponent) {\n    // Asigno el próximo ID ala nueva lista\n    productoComponent.id = ++this.ultimoId;\n    // Agrego el producto al array\n    this.productoComponent.push(productoComponent);\n    // Retorno el objeto con ID actualizado\n    return this;\n  }\n  eliminarProducto(id) {\n    // REemplazo la lista de productos por otro array resultante\n    //del filtro que excluye el producto por ID\n    this.productoComponent = this.productoComponent.filter(productoComponent => productoComponent.id !== id);\n    return this;\n  }\n  obtenerProducto(id) {\n    // La función pop() retorna la tarea resultante del filtro por id\n    // En caso que no exista, retorna undefined\n    return this.productoComponent.filter(productoComponent => productoComponent.id === id).pop();\n  }\n  modificarProducto(id, values = {}) {\n    // Obtengo la tarea por ID\n    let productoComponent = this.obtenerProducto(id);\n    if (!productoComponent) {\n      // No la encontré\n      return undefined;\n    }\n    // Actualizo la tarea con los valores recibidos en el parámetro\n    Object.assign(productoComponent, values);\n    // Retorno la tarea\n    return productoComponent;\n  }\n  static #_ = this.ɵfac = function ProductosService_Factory(t) {\n    return new (t || ProductosService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductosService,\n    factory: ProductosService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ProductosService","constructor","productoComponent","ultimoId","getListaProductos","productos","crearProductos","id","push","eliminarProducto","filter","obtenerProducto","pop","modificarProducto","values","undefined","Object","assign","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\SIMM\\Desktop\\Nueva carpeta\\Desarrollo-de-software\\Proyecto-Catedra-Desarrollo-de-Software-front--master\\src\\app\\compPrincipal\\producto\\productos.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n//import { ListaProductosComponent } from './lista-productos/lista-productos.component';\nimport { ProductoComponent } from './producto.component';\nimport { Producto } from '../interfaces/Producto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductosService {\n\n  productoComponent: ProductoComponent [] = [];\n  ultimoId: number=0;\n\n  constructor() { }\n  \n\n  getListaProductos(): Producto[] {\n    return this.productos;\n  }\n  \n  crearProductos(productoComponent: ProductoComponent): ProductosService{\n    // Asigno el próximo ID ala nueva lista\n    productoComponent.id = ++this.ultimoId;\n    // Agrego el producto al array\n    this.productoComponent.push(productoComponent);\n    // Retorno el objeto con ID actualizado\n    return this;   \n   }\n   eliminarProducto(id: number): ProductosService{\n    // REemplazo la lista de productos por otro array resultante\n    //del filtro que excluye el producto por ID\n    this.productoComponent = this.productoComponent.filter(productoComponent => productoComponent.id !== id );\n    return this;\n  }\n  obtenerProducto(id: number): ProductoComponent | undefined{\n    // La función pop() retorna la tarea resultante del filtro por id\n    // En caso que no exista, retorna undefined\n    return this.productoComponent\n        .filter(productoComponent => productoComponent.id === id)\n        .pop();\n  }\n  modificarProducto(id: number, values: Object = {}): ProductoComponent | undefined{\n    // Obtengo la tarea por ID\n    let productoComponent = this.obtenerProducto(id);\n    if (!productoComponent){\n      // No la encontré\n      return undefined;\n    }    \n    // Actualizo la tarea con los valores recibidos en el parámetro\n    Object.assign(productoComponent, values);\n    // Retorno la tarea\n    return productoComponent;\n  }\n}\n"],"mappings":";AAQA,OAAM,MAAOA,gBAAgB;EAK3BC,YAAA;IAHA,KAAAC,iBAAiB,GAAyB,EAAE;IAC5C,KAAAC,QAAQ,GAAS,CAAC;EAEF;EAGhBC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,cAAcA,CAACJ,iBAAoC;IACjD;IACAA,iBAAiB,CAACK,EAAE,GAAG,EAAE,IAAI,CAACJ,QAAQ;IACtC;IACA,IAAI,CAACD,iBAAiB,CAACM,IAAI,CAACN,iBAAiB,CAAC;IAC9C;IACA,OAAO,IAAI;EACZ;EACAO,gBAAgBA,CAACF,EAAU;IAC1B;IACA;IACA,IAAI,CAACL,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACQ,MAAM,CAACR,iBAAiB,IAAIA,iBAAiB,CAACK,EAAE,KAAKA,EAAE,CAAE;IACzG,OAAO,IAAI;EACb;EACAI,eAAeA,CAACJ,EAAU;IACxB;IACA;IACA,OAAO,IAAI,CAACL,iBAAiB,CACxBQ,MAAM,CAACR,iBAAiB,IAAIA,iBAAiB,CAACK,EAAE,KAAKA,EAAE,CAAC,CACxDK,GAAG,EAAE;EACZ;EACAC,iBAAiBA,CAACN,EAAU,EAAEO,MAAA,GAAiB,EAAE;IAC/C;IACA,IAAIZ,iBAAiB,GAAG,IAAI,CAACS,eAAe,CAACJ,EAAE,CAAC;IAChD,IAAI,CAACL,iBAAiB,EAAC;MACrB;MACA,OAAOa,SAAS;;IAElB;IACAC,MAAM,CAACC,MAAM,CAACf,iBAAiB,EAAEY,MAAM,CAAC;IACxC;IACA,OAAOZ,iBAAiB;EAC1B;EAAC,QAAAgB,CAAA,G;qBA5CUlB,gBAAgB;EAAA;EAAA,QAAAmB,EAAA,G;WAAhBnB,gBAAgB;IAAAoB,OAAA,EAAhBpB,gBAAgB,CAAAqB,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}