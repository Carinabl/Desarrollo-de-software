{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class OfertaProductoService {\n  constructor() {\n    //BehaviorSubject: Es un tipo de observable que tiene un valor inicial y emite el último valor emitido más el valor actual a todos sus suscriptores cuando se suscriben.\n    //esta línea de código está creando un mecanismo para compartir y observar un valor específico (en este caso, un producto seleccionado) entre diferentes partes de tu aplicación.\n    this.productoSource = new BehaviorSubject(null);\n    this.producto$ = this.productoSource.asObservable();\n  }\n  // esta línea de código se encarga de notificar a todos los componentes que están suscritos al BehaviorSubject que ha ocurrido un cambio en el producto seleccionado. \n  enviarProducto(producto) {\n    this.productoSource.next(producto);\n  }\n  static #_ = this.ɵfac = function OfertaProductoService_Factory(t) {\n    return new (t || OfertaProductoService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OfertaProductoService,\n    factory: OfertaProductoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","OfertaProductoService","constructor","productoSource","producto$","asObservable","enviarProducto","producto","next","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\SIMM\\Desktop\\Nueva carpeta\\Desarrollo-de-software\\Proyecto-Catedra-Desarrollo-de-Software-front--master\\src\\app\\oferta-producto.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OfertaProductoService {\n  //BehaviorSubject: Es un tipo de observable que tiene un valor inicial y emite el último valor emitido más el valor actual a todos sus suscriptores cuando se suscriben.\n  //esta línea de código está creando un mecanismo para compartir y observar un valor específico (en este caso, un producto seleccionado) entre diferentes partes de tu aplicación.\n  private productoSource = new BehaviorSubject<any>(null);\n  producto$ = this.productoSource.asObservable();\n  // esta línea de código se encarga de notificar a todos los componentes que están suscritos al BehaviorSubject que ha ocurrido un cambio en el producto seleccionado. \n  enviarProducto(producto: any) {\n    this.productoSource.next(producto);\n  }\n  /*\n  \n  */\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,qBAAqB;EAHlCC,YAAA;IAIE;IACA;IACQ,KAAAC,cAAc,GAAG,IAAIH,eAAe,CAAM,IAAI,CAAC;IACvD,KAAAI,SAAS,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;;EAC9C;EACAC,cAAcA,CAACC,QAAa;IAC1B,IAAI,CAACJ,cAAc,CAACK,IAAI,CAACD,QAAQ,CAAC;EACpC;EAAC,QAAAE,CAAA,G;qBARUR,qBAAqB;EAAA;EAAA,QAAAS,EAAA,G;WAArBT,qBAAqB;IAAAU,OAAA,EAArBV,qBAAqB,CAAAW,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}