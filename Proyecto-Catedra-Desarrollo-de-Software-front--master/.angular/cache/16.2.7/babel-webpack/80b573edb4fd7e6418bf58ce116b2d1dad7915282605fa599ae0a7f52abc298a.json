{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ListaProductosComponent = class ListaProductosComponent {\n  constructor(productoService) {\n    this.productoService = productoService;\n    this.productos = [];\n    this.productoSeleccionado = null;\n    this.productoElegido = null;\n  }\n  ngOnInit() {\n    //consigue la lista de productos para mostrar en la tabla\n    this.productoService.getProductos().subscribe(productos => {\n      console.log(\"Productos: \", productos);\n      this.productos = productos;\n    });\n  }\n  editarProducto(id) {\n    console.log(`Editar producto con ID: ${id}`);\n    const productoElegido = this.productos.find(p => p.id === id);\n    if (productoElegido) {\n      this.productoElegido = productoElegido;\n      console.log(this.productoElegido);\n    } else {\n      console.error(`No se encontró un producto con ID ${id}`);\n    }\n  }\n  guardar() {\n    if (this.productoElegido) {\n      this.productoService.actualizar(this.productoElegido).subscribe({\n        next: response => {\n          console.log('Respuesta del servidor:', response);\n          // Recargar la lista de productos\n          this.cargarListaProductos();\n        },\n        error: error => {\n          console.error('Error al actualizar el producto:', error);\n        }\n      });\n    }\n  }\n  cargarListaProductos() {\n    this.productoService.getProductos().subscribe(productos => {\n      this.productos = productos;\n    });\n  }\n};\nListaProductosComponent = __decorate([Component({\n  selector: 'app-lista-productos',\n  templateUrl: './lista-productos.component.html',\n  styleUrls: ['./lista-productos.component.css']\n})], ListaProductosComponent);","map":{"version":3,"names":["Component","ListaProductosComponent","constructor","productoService","productos","productoSeleccionado","productoElegido","ngOnInit","getProductos","subscribe","console","log","editarProducto","id","find","p","error","guardar","actualizar","next","response","cargarListaProductos","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\SIMM\\Desktop\\Nueva carpeta\\Desarrollo-de-software\\Proyecto-Catedra-Desarrollo-de-Software-front--master\\src\\app\\lista-productos\\lista-productos.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ProductosService } from '../compPrincipal/producto/productos.service'; \nimport { Producto } from '../compPrincipal/interfaces/Producto';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n\n\n\n@Component({\n  selector: 'app-lista-productos',\n  templateUrl: './lista-productos.component.html',\n  styleUrls: ['./lista-productos.component.css']\n})\nexport class ListaProductosComponent {\n  productos: Producto[] = [];\n  productoSeleccionado: Producto | null = null;\n  productoElegido: Producto | null = null;\n  \n  constructor(private productoService: ProductosServic ) {}\n  \n  ngOnInit() {\n    //consigue la lista de productos para mostrar en la tabla\n    this.productoService.getProductos().subscribe((productos: Producto[]) => {\n      console.log(\"Productos: \", productos);\n      this.productos = productos;\n    });\n  }\n\n  editarProducto(id: number): void {\n    console.log(`Editar producto con ID: ${id}`);\n    const productoElegido = this.productos.find(p => p.id === id);\n    \n    if (productoElegido) {\n      this.productoElegido = productoElegido;\n      console.log(this.productoElegido);\n    } else {\n      console.error(`No se encontró un producto con ID ${id}`);\n    }\n  }\n\n  guardar(): void {\n    if (this.productoElegido) {\n      this.productoService.actualizar(this.productoElegido).subscribe({\n        next: (response) => {\n          console.log('Respuesta del servidor:', response);\n          // Recargar la lista de productos\n          this.cargarListaProductos();\n        },\n        error: (error) => {\n          console.error('Error al actualizar el producto:', error);\n        }\n      });\n    }\n  }\n  \n  cargarListaProductos() {\n    this.productoService.getProductos().subscribe((productos: Producto[]) => {\n      this.productos = productos;\n    });\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAalC,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAKlCC,YAAoBC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;IAJnC,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,oBAAoB,GAAoB,IAAI;IAC5C,KAAAC,eAAe,GAAoB,IAAI;EAEiB;EAExDC,QAAQA,CAAA;IACN;IACA,IAAI,CAACJ,eAAe,CAACK,YAAY,EAAE,CAACC,SAAS,CAAEL,SAAqB,IAAI;MACtEM,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,SAAS,CAAC;MACrC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,CAAC;EACJ;EAEAQ,cAAcA,CAACC,EAAU;IACvBH,OAAO,CAACC,GAAG,CAAC,2BAA2BE,EAAE,EAAE,CAAC;IAC5C,MAAMP,eAAe,GAAG,IAAI,CAACF,SAAS,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC;IAE7D,IAAIP,eAAe,EAAE;MACnB,IAAI,CAACA,eAAe,GAAGA,eAAe;MACtCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,eAAe,CAAC;KAClC,MAAM;MACLI,OAAO,CAACM,KAAK,CAAC,qCAAqCH,EAAE,EAAE,CAAC;;EAE5D;EAEAI,OAAOA,CAAA;IACL,IAAI,IAAI,CAACX,eAAe,EAAE;MACxB,IAAI,CAACH,eAAe,CAACe,UAAU,CAAC,IAAI,CAACZ,eAAe,CAAC,CAACG,SAAS,CAAC;QAC9DU,IAAI,EAAGC,QAAQ,IAAI;UACjBV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAES,QAAQ,CAAC;UAChD;UACA,IAAI,CAACC,oBAAoB,EAAE;QAC7B,CAAC;QACDL,KAAK,EAAGA,KAAK,IAAI;UACfN,OAAO,CAACM,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;OACD,CAAC;;EAEN;EAEAK,oBAAoBA,CAAA;IAClB,IAAI,CAAClB,eAAe,CAACK,YAAY,EAAE,CAACC,SAAS,CAAEL,SAAqB,IAAI;MACtE,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC5B,CAAC,CAAC;EACJ;CACD;AA/CYH,uBAAuB,GAAAqB,UAAA,EALnCtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACWxB,uBAAuB,CA+CnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}